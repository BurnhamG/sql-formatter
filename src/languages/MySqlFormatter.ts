import Formatter from '../core/Formatter';
import Tokenizer from '../core/Tokenizer';

const reservedWords = [
	'ACCESSIBLE',
	'ALL',
	'ALTER',
	'ANALYZE',
	'AS',
	'ASC',
	'ASENSITIVE',
	'BEFORE',
	'BETWEEN',
	'BIGINT',
	'BINARY',
	'BLOB',
	'BOTH',
	'BY',
	'CALL',
	'CASCADE',
	'CHANGE',
	'CHAR',
	'CHARACTER',
	'CHECK',
	'COLLATE',
	'COLUMN',
	'CONDITION',
	'CONSTRAINT',
	'CONTINUE',
	'CONVERT',
	'COUNT',
	'CREATE',
	'CROSS',
	'CUBE',
	'CUME_DIST',
	'CURRENT_DATE',
	'CURRENT_TIME',
	'CURRENT_TIMESTAMP',
	'CURRENT_USER',
	'CURSOR',
	'DATABASE',
	'DATABASES',
	'DAY_HOUR',
	'DAY_MICROSECOND',
	'DAY_MINUTE',
	'DAY_SECOND',
	'DEC',
	'DECIMAL',
	'DECLARE',
	'DEFAULT',
	'DELAYED',
	'DELETE',
	'DENSE_RANK',
	'DESC',
	'DESCRIBE',
	'DETERMINISTIC',
	'DISTINCT',
	'DISTINCTROW',
	'DIV',
	'DOUBLE',
	'DROP',
	'DUAL',
	'EACH',
	'ELSEIF',
	'EMPTY',
	'ENCLOSED',
	'ESCAPED',
	'EXISTS',
	'EXIT',
	'EXPLAIN',
	'FALSE',
	'FETCH',
	'FIRST_VALUE',
	'FLOAT',
	'FLOAT4',
	'FLOAT8',
	'FOR',
	'FORCE',
	'FOREIGN',
	'FULLTEXT',
	'FUNCTION',
	'GENERATED',
	'GET',
	'GRANT',
	'GROUP',
	'GROUPING',
	'GROUPS',
	'HIGH_PRIORITY',
	'HOUR_MICROSECOND',
	'HOUR_MINUTE',
	'HOUR_SECOND',
	'IF',
	'IGNORE',
	'IN',
	'INDEX',
	'INFILE',
	'INNER',
	'INOUT',
	'INSENSITIVE',
	'INT',
	'INT1',
	'INT2',
	'INT3',
	'INT4',
	'INT8',
	'INTEGER',
	'INTERVAL',
	'INTO',
	'IO_AFTER_GTIDS',
	'IO_BEFORE_GTIDS',
	'IS',
	'ITERATE',
	'JSON_TABLE',
	'KEY',
	'KEYS',
	'KILL',
	'LAG',
	'LAST_VALUE',
	'LATERAL',
	'LEAD',
	'LEADING',
	'LEAVE',
	'LEFT',
	'LIKE',
	'LINEAR',
	'LINES',
	'LOAD',
	'LOCALTIME',
	'LOCALTIMESTAMP',
	'LOCK',
	'LONG',
	'LONGBLOB',
	'LONGTEXT',
	'LOOP',
	'LOW_PRIORITY',
	'MASTER_BIND',
	'MASTER_SSL_VERIFY_SERVER_CERT',
	'MATCH',
	'MAXVALUE',
	'MEDIUMBLOB',
	'MEDIUMINT',
	'MEDIUMTEXT',
	'MIDDLEINT',
	'MINUTE_MICROSECOND',
	'MINUTE_SECOND',
	'MOD',
	'MODIFIES',
	'NATURAL',
	'NOT',
	'NO_WRITE_TO_BINLOG',
	'NTH_VALUE',
	'NTILE',
	'NULL',
	'NUMERIC',
	'OF',
	'OPTIMIZE',
	'OPTIMIZER_COSTS',
	'OPTION',
	'OPTIONALLY',
	'ORDER',
	'OUT',
	'OUTER',
	'OUTFILE',
	'OVER',
	'PARTITION',
	'PERCENT_RANK',
	'PRECISION',
	'PRIMARY',
	'PROCEDURE',
	'PURGE',
	'RANGE',
	'RANK',
	'READ',
	'READS',
	'READ_WRITE',
	'REAL',
	'RECURSIVE',
	'REFERENCES',
	'REGEXP',
	'RELEASE',
	'RENAME',
	'REPEAT',
	'REPLACE',
	'REQUIRE',
	'RESIGNAL',
	'RESTRICT',
	'RETURN',
	'REVOKE',
	'RIGHT',
	'RLIKE',
	'ROW',
	'ROWS',
	'ROW_NUMBER',
	'SCHEMA',
	'SCHEMAS',
	'SECOND_MICROSECOND',
	'SELECT',
	'SENSITIVE',
	'SEPARATOR',
	'SIGNAL',
	'SMALLINT',
	'SPATIAL',
	'SPECIFIC',
	'SQL',
	'SQLEXCEPTION',
	'SQLSTATE',
	'SQLWARNING',
	'SQL_BIG_RESULT',
	'SQL_CALC_FOUND_ROWS',
	'SQL_SMALL_RESULT',
	'SSL',
	'STARTING',
	'STORED',
	'SYSTEM',
	'TABLE',
	'TERMINATED',
	'TINYBLOB',
	'TINYINT',
	'TINYTEXT',
	'TO',
	'TRAILING',
	'TRIGGER',
	'TRUE',
	'UNDO',
	'UNION',
	'UNIQUE',
	'UNLOCK',
	'UNSIGNED',
	'USAGE',
	'USE',
	'USING',
	'UTC_DATE',
	'UTC_TIME',
	'UTC_TIMESTAMP',
	'VARBINARY',
	'VARCHAR',
	'VARCHARACTER',
	'VARYING',
	'VIRTUAL',
	'WHILE',
	'WINDOW',
	'WRITE',
	'YEAR_MONTH',
	'ZEROFILL',
];

const reservedTopLevelWords = [
	'ADD',
	'ALTER COLUMN',
	'ALTER TABLE',
	'DELETE FROM',
	'EXCEPT',
	'FROM',
	'GROUP BY',
	'HAVING',
	'INSERT INTO',
	'INSERT',
	'LIMIT',
	'ORDER BY',
	'SELECT',
	'SET',
	'SHOW',
	'UPDATE',
	'VALUES',
	'WHERE',
	'WITH',
];

const reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'UNION', 'UNION ALL'];

const reservedNewlineWords = [
	'AND',
	'OR',
	'XOR',
	'ON',
	'WHEN',
	'THEN',
	'ELSE',
	// joins
	'JOIN',
	'INNER JOIN',
	'LEFT JOIN',
	'LEFT OUTER JOIN',
	'RIGHT JOIN',
	'RIGHT OUTER JOIN',
	'CROSS JOIN',
	'NATURAL JOIN',
	// non-standard joins
	'STRAIGHT_JOIN',
	'NATURAL LEFT JOIN',
	'NATURAL LEFT OUTER JOIN',
	'NATURAL RIGHT JOIN',
	'NATURAL RIGHT OUTER JOIN',
];

export default class MySqlFormatter extends Formatter {
	tokenizer() {
		return new Tokenizer({
			reservedWords,
			reservedTopLevelWords,
			reservedNewlineWords,
			reservedTopLevelWordsNoIndent,
			stringTypes: ['``', "''", '""'],
			openParens: ['(', 'CASE'],
			closeParens: [')', 'END'],
			indexedPlaceholderTypes: ['?'],
			namedPlaceholderTypes: [],
			lineCommentTypes: ['--', '#'],
			specialWordChars: ['@'],
			operators: [':=', '<<', '>>', '!=', '<>', '<=>', '&&', '||', '->', '->>'],
		});
	}
}
